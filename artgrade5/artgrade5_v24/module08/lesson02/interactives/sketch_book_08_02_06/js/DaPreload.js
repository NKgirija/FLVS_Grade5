// Generated by CoffeeScript 1.10.0

/**
*
* The DaPreloader
*
* @class DaPreloader
*
* @author C.J. Morrison
*
* @since 10/12/2016
*
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.DaPreloader = (function() {

    /**
    *
    * Drawing Area Reference, this will reference the Drawing Area this Preloader is associated with.
    *
    * @property _daRef
    *
    * @type {DrawingArea}
    *
    * @default void 0
    *
     */
    DaPreloader.prototype._daRef = void 0;


    /**
    *
    * Drawing Area Manager Reference, this will reference the Drawing Area Manager that the Drawing area that contains this Preloader is associated with.
    *
    * @property _daManagerRef
    *
    * @type {DrawingAreaManager}
    *
    * @default void 0
    *
     */

    DaPreloader.prototype._daManagerRef = void 0;


    /**
    *
    * An array of options with their values
    *
    * @property _options
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DaPreloader.prototype._options = void 0;


    /**
    *
    * A container for all of the elements of the Preloader 
    * this is what will be added as a child to the drawing area.
    *
    * @property _container
    *
    * @type {CreateJS.Container}
    *
    * @default Void 0
    *
     */

    DaPreloader.prototype._container = void 0;


    /**
    *
    * Constructor will define the properties for this class and call Build method
    *
    * @method DaPreloader
    * 
    * @param daRef - Drawing Area Reference.
    * @param options - array of options and values for this Preloader (includes id)
    * @return void 0
    *
     */

    function DaPreloader(daRef, options) {
      this.RequestEnd = bind(this.RequestEnd, this);
      this.SetPreloadStatus = bind(this.SetPreloadStatus, this);
      this.AnimateLoadingBubble = bind(this.AnimateLoadingBubble, this);
      this.LoadingBubble = bind(this.LoadingBubble, this);
      this.Build = bind(this.Build, this);
      this._daRef = daRef;
      this._daManagerRef = daRef._managerRef;
      this._options = options;
      this._id = options.id;
      this._loadingBarCont = void 0;
      this.Build();
      return;
    }


    /**
    *
    * @method Build
    *
    * Defines the Preloader containers, bacground, and animations
    *
    * @param Void 0
    * @return this
    *
     */

    DaPreloader.prototype.Build = function() {
      var cnt, lBbl, loadingBar, loadingBg, loadingGrey;
      this._container = new createjs.Container;
      this._options.scale = this._daRef._canvRef.width / 750;
      this.loadingBarWidth = 0;
      loadingBg = new createjs.Bitmap(this._daManagerRef._loadedAssets.getResult('loader_bg'));
      this._container.addChild(loadingBg);
      this._loadingBarCont = new createjs.Container;
      this._loadingBarCont.setBounds(0, 0, 517 * this._options.scale, 84 * this._options.scale);
      this._loadingBarCont.x = 116 * this._options.scale;
      this._loadingBarCont.y = 292 * this._options.scale;
      this._container.addChildAt(this._loadingBarCont, 0);
      loadingBar = new createjs.Shape;
      loadingBar.graphics.beginFill('#a5ce3b').drawRect(0, 0, this.loadingBarWidth, 84);
      loadingBar.x = 110 * this._options.scale;
      loadingBar.y = 335 * this._options.scale;
      loadingBar.regY = 83 / 2;
      loadingBar.scaleX = loadingBar.scaleY = this._options.scale;
      this._container.addChildAt(loadingBar, 0);
      loadingBar.addEventListener('tick', (function(_this) {
        return function() {
          loadingBar.graphics.clear();
          loadingBar.graphics.beginFill('#a5ce3b').drawRect(0, 0, _this.loadingBarWidth, 84);
        };
      })(this));
      loadingGrey = new createjs.Shape;
      loadingGrey.graphics.beginFill('#d8d8d8').drawRect(0, 0, 530, 84);
      loadingGrey.x = 110 * this._options.scale;
      loadingGrey.y = 335 * this._options.scale;
      loadingGrey.regY = 83 / 2;
      loadingGrey.scaleX = loadingGrey.scaleY = this._options.scale;
      this._container.addChildAt(loadingGrey, 0);
      this._loadMessage = new createjs.Text(this._daManagerRef.GetLang(this._daRef, "loading"), "60px Arial", "#FFFFFF");
      this._loadMessage.width = loadingBg.image.width;
      this._loadMessage.textAlign = "center";
      this._loadMessage.x = loadingBg.image.width / 2;
      this._loadMessage.y = loadingBg.image.height / 2 - 120;
      this._container.addChild(this._loadMessage);
      cnt = 0;
      lBbl = setInterval(((function(_this) {
        return function() {
          if (cnt < 5000) {
            _this.LoadingBubble();
            cnt++;
          } else {
            clearInterval(lBbl);
          }
        };
      })(this)), 100);
      return this;
    };

    DaPreloader.prototype.LoadingBubble = function() {
      var bColours, c, radius, tempBbl;
      radius = Math.floor(Math.random() * (10 - 4 + 1)) + 4;
      bColours = ['#96c03d', '#8aae3e'];
      c = Math.floor(Math.random() * 2);
      tempBbl = new createjs.Shape;
      tempBbl.graphics.beginFill(bColours[c]).drawCircle(0, 0, radius);
      tempBbl.x = Math.floor(Math.random() * (this.loadingBarWidth - 30));
      tempBbl.y = 100 * this._options.scale;
      this._loadingBarCont.addChild(tempBbl);
      tempBbl.addEventListener('tick', (function(_this) {
        return function(evt) {
          _this.AnimateLoadingBubble(evt.target);
        };
      })(this));
    };

    DaPreloader.prototype.AnimateLoadingBubble = function(bbl) {
      if (bbl.y > -50 * this._options.scale) {
        bbl.y -= 3 * this._options.scale;
      } else {
        bbl.removeAllEventListeners();
        this._loadingBarCont.removeChild(bbl);
      }
    };

    DaPreloader.prototype.SetPreloadStatus = function(percent, additive) {
      if (additive) {
        this.loadingBarWidth += (526 / 100) * (percent | 0);
      } else {
        this.loadingBarWidth = (526 / 100) * (percent | 0);
      }
      return this._daRef._cjsStage.update();
    };


    /**
    *
    * @method RequestEnd
    *
    * Calls animation to remove the preloader.
    *
    * @param callback:Function called after animation has removed preloader, this function should involve destorying it from the drawing area.
    * @return Void 0
    *
     */

    DaPreloader.prototype.RequestEnd = function(callback) {
      var aOff, animateOff;
      animateOff = (function(_this) {
        return function() {
          _this._container.removeEventListener('click', animateOff);
          return createjs.Tween.get(_this._container).to({
            y: -750
          }, 800, createjs.Ease.getPowInOut(3)).call(function() {
            if (callback) {
              return callback();
            }
          });
        };
      })(this);
      this.SetPreloadStatus(100);
      if (!navigator.platform.match(/(iPhone|iPod|iPad)/i)) {
        return aOff = setInterval(((function(_this) {
          return function() {
            animateOff();
            return clearInterval(aOff);
          };
        })(this)), 1500);
      } else {
        this._loadMessage.text = this._daManagerRef.GetLang(this._daRef, "TapBegin");
        return this._container.addEventListener('click', animateOff);
      }
    };

    return DaPreloader;

  })();

}).call(this);
