// Generated by CoffeeScript 1.10.0

/**
*
* The DaModal
*
* @class DaModal
*
* @author C.J. Morrison
*
* @since 10/12/2016
*
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.DaModal = (function() {

    /**
    *
    * ID associated with object, this is used for searching and selecting, this is required and must be unique
    *
    * @property _id
    *
    * @type {String}
    *
    * @default void 0
    *
     */
    DaModal.prototype._id = void 0;


    /**
    *
    * Drawing Area Reference, this will reference the Drawing Area this modal is associated with.
    *
    * @property _daRef
    *
    * @type {DrawingArea}
    *
    * @default void 0
    *
     */

    DaModal.prototype._daRef = void 0;


    /**
    *
    * Drawing Area Manager Reference, this will reference the Drawing Area Manager that the Drawing area that contains this modal is associated with.
    *
    * @property _daManagerRef
    *
    * @type {DrawingAreaManager}
    *
    * @default void 0
    *
     */

    DaModal.prototype._daManagerRef = void 0;


    /**
    *
    * An array of options with their values
    *
    * @property _options
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DaModal.prototype._options = void 0;


    /**
    *
    * An array of content object and values that the modal will display.
    * each item in the array would be a separate page within a multi-page modal
    *
    * @property _contentData
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DaModal.prototype._contentData = void 0;


    /**
    *
    * An array of button data objects that will be built as DaButton objects in the modal
    *
    * @property _buttonsData
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DaModal.prototype._buttonsData = void 0;

    DaModal.prototype._buttons = void 0;


    /**
    *
    * True if the modal has been opened ans is visible to the user
    *
    * @property _opened
    *
    * @type {Boolean}
    *
    * @default false
    *
     */

    DaModal.prototype._opened = void 0;


    /**
    *
    * True if the modal has been opened and is in the process of tweening 
    *
    * @property _animating
    *
    * @type {Boolean}
    *
    * @default false
    *
     */

    DaModal.prototype._animating = void 0;


    /**
    *
    * The width of this modal
    *
    * @property _width
    *
    * @type {Number}
    *
    * @default 0
    *
     */

    DaModal.prototype._width = void 0;


    /**
    *
    * The height of this modal
    *
    * @property _height
    *
    * @type {Number}
    *
    * @default 0
    *
     */

    DaModal.prototype._height = void 0;


    /**
    *
    * A faded rectangle which covers the canvas behind the modal, this informs the user that the elements behind the modal are disabled, and draws focus to the modal itself. 
    *
    * @property _screen
    *
    * @type {CreateJS.Shape}
    *
    * @default Void 0
    *
     */

    DaModal.prototype._screen = void 0;


    /**
    *
    * A container for all of the elements of the modal excluding the _screen
    *
    * @property _modCont
    *
    * @type {CreateJS.Container}
    *
    * @default Void 0
    *
     */

    DaModal.prototype._modCont = void 0;


    /**
    *
    * A container for all of the elements of the modal (both _screen and modCont)
    * this is what will be added as a child to the drawing area.
    *
    * @property _container
    *
    * @type {CreateJS.Container}
    *
    * @default Void 0
    *
     */

    DaModal.prototype._container = void 0;


    /**
    *
    * Constructor will define the properties for this class and call Build method
    *
    * @method DaModal
    * 
    * @param daRef - Drawing Area Reference.
    * @param options - array of options and values for this modal (includes id)
    * @return void 0
    *
     */

    function DaModal(daRef, options) {
      this.Enable = bind(this.Enable, this);
      this.Disable = bind(this.Disable, this);
      this.Close = bind(this.Close, this);
      this.Open = bind(this.Open, this);
      this.AppendButtons = bind(this.AppendButtons, this);
      this.ChangeContent = bind(this.ChangeContent, this);
      this.DrawBackground = bind(this.DrawBackground, this);
      this.Build = bind(this.Build, this);
      this._daRef = daRef;
      this._daManagerRef = daRef._managerRef;
      this._contentData = options.content;
      this._buttonsData = options.buttons;
      this._buttons = [];
      this._options = options.options;
      this._id = options.ID;
      this._opened = false;
      this._animating = false;
      this.Build();
      return;
    }


    /**
    *
    * @method Build
    *
    * Defines the modal containers, screen, and sub elements using the provided options 
    *
    * @param Void 0
    * @return this
    *
     */

    DaModal.prototype.Build = function() {
      var i, len, mdChld, modBG, ref, textElm, useText;
      this._container = new createjs.Container;
      this._screen = new createjs.Shape;
      this._screen.graphics.beginFill('rgba(0,0,0,.6)');
      this._screen.graphics.rect(0, 0, this._daRef._canvRef.width, this._daRef._canvRef.height);
      this._screen.alpha = 0;
      this._container.addChild(this._screen);
      this._modCont = new createjs.Container;
      this._container.addChild(this._modCont);
      useText = this._daManagerRef.ParseDataText(this._daRef, this._contentData[0].text);
      textElm = new createjs.Text(useText, "bold " + (20 * this._daManagerRef._fontScaleAdjust) + "px " + this._daManagerRef._defaultFont, "#FFFFFF");
      textElm.x = 15 + (710 / 2);
      textElm.y = 20;
      textElm._id = this._id + "_text";
      textElm.lineWidth = 710;
      textElm.textAlign = "center";
      this.DrawBackground(void 0, textElm);
      if (this._options.xPos) {
        this._modCont.x = this._options.xPos;
      }
      modBG = false;
      ref = this._modCont.children;
      for (i = 0, len = ref.length; i < len; i++) {
        mdChld = ref[i];
        if (mdChld._id === (this._id + "_modBG")) {
          modBG = mdChld;
        }
      }
      if (this._options.yPos) {
        this._modCont.y = this._options.yPos;
      } else if (modBG) {
        this._modCont.y = (this._daRef._canvRef.height / 2) - (modBG.height / 2);
        this._modCont.addChild(textElm);
        if (this._daManagerRef._FFtextAdjust) {
          textElm.y += 3;
        }
      }
      this.AppendButtons();
      return this;
    };

    DaModal.prototype.DrawBackground = function(useShape, textElm) {
      var bitmap, fillColor, height, i, len, modBG, obj, radius, ref, width;
      if (this._options.useBackground) {
        if (this._options.useBackground.constructor === String) {
          bitmap = new createjs.Bitmap(this._options.useBackground);
          toolbarBGcont.addChild(bitmap);
          this._width = bitmap.width;
          this._height = bitmap.height;
        } else if (this._options.useBackground.constructor === Object) {
          this._options.useBackground = [this._options.useBackground];
        }
        if (this._options.useBackground.constructor === Array) {
          ref = this._options.useBackground;
          for (i = 0, len = ref.length; i < len; i++) {
            obj = ref[i];
            if (obj.fillColor) {
              fillColor = obj.fillColor;
            } else {
              fillColor = "RGB(200, 200, 200)";
            }
            if (obj.width) {
              width = obj.width;
            } else {
              width = 50;
            }
            if (this._width) {
              this._width = Math.max(this._width, width);
            } else {
              this._width = width;
            }
            if (obj.height) {
              if (obj.height.constructor === Number) {
                height = obj.height;
              } else if (obj.height.constructor === String) {
                height = parseInt(this._daManagerRef.ParseDataText(this._daRef, obj.height));
              }
              if (!height) {
                height = 300;
              }
            } else {
              height = textElm.getMeasuredHeight() + 120;
            }
            height = Math.round(height);
            if (this._height) {
              this._height = Math.max(this._height, height);
            }
            if (obj.radius) {
              if (obj.radius.constructor === Number) {
                radius = [obj.radius, obj.radius, obj.radius, obj.radius];
              } else if (obj.radius.constructor === Array) {
                if (obj.radius.length === 2) {
                  radius = [obj.radius[0], obj.radius[0], obj.radius[1], obj.radius[1]];
                } else if (obj.radius.length === 4) {
                  radius = obj.radius;
                }
              }
            } else {
              radius = [0, 0, 0, 0];
            }
            if (useShape) {
              modBG = useShape;
              modBG.graphics.clear();
              this._daRef._cjsStage.update();
            }
            modBG = new createjs.Shape;
            modBG.graphics.beginFill(fillColor);
            modBG.graphics.drawRoundRectComplex(0, 0, width, height, radius[0], radius[1], radius[2], radius[3]);
            modBG.width = width;
            modBG.height = height;
            this._modCont.height = height;
            this._modCont.width = width;
            modBG._id = this._id + "_modBG";
            while (this._daRef.GetDaObjectById(this._id + "_modBG")) {
              this._daRef.GetDaObjectById(this._id + "_modBG").parent.removeChild(this._daRef.GetDaObjectById(this._id + "_modBG"));
            }
            this._modCont.addChildAt(modBG, 0);
            return;
          }
        }
      }
    };

    DaModal.prototype.ChangeContent = function(newContent) {
      var bg, button, buttons, i, len, textElm, useText;
      this._contentData = newContent;
      useText = this._daManagerRef.ParseDataText(this._daRef, this._contentData[0].text);
      textElm = this._daRef.GetDaObjectById(this._id + "_text");
      this._modCont.removeChild(textElm);
      textElm = new createjs.Text(this._contentData[0].text, "bold " + (20 * this._daManagerRef._fontScaleAdjust) + "px " + this._daManagerRef._defaultFont, "#FFFFFF");
      textElm.x = 15 + (710 / 2);
      textElm.y = 20;
      textElm._id = this._id + "_text";
      textElm.lineWidth = 710;
      textElm.textAlign = "center";
      this._modCont.addChild(textElm);
      bg = this._daRef.GetDaObjectById(this._id + "_modBG");
      bg.graphics.clear();
      this.DrawBackground(bg, textElm);
      this._modCont.y = (this._daRef._canvRef.height / 2) - (this._daRef.GetDaObjectById(this._id + "_modBG").height / 2);
      buttons = this._daRef.GetDaObjectById(this._id + "_buttons").children;
      for (i = 0, len = buttons.length; i < len; i++) {
        button = buttons[i];
        button.y = Math.round(this._modCont.height - 70);
      }
      if (this._daManagerRef._FFtextAdjust) {
        textElm.y += 3;
      }
    };


    /**
    *
    * @method AppendButtons
    *
    * called from the Build Method this builds the various DaButtons using the options provided
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DaModal.prototype.AppendButtons = function() {
      var btnIndex, button, buttonObj, buttons, i, len, ref;
      buttons = new createjs.Container;
      buttons._id = this._id + "_buttons";
      btnIndex = 0;
      ref = this._buttonsData;
      for (i = 0, len = ref.length; i < len; i++) {
        button = ref[i];
        if (this._buttons.length === 1) {
          button.xPos = 300 + (btnIndex * 100);
        } else {
          button.xPos = 200 + (btnIndex * 200);
        }
        button.yPos = Math.round(this._modCont.height - 70);
        buttonObj = new window.DaButton(this._daRef, button);
        buttons.addChild(buttonObj._container);
        this._buttons.push(buttonObj);
        btnIndex++;
      }
      this._modCont.addChild(buttons);
    };


    /**
    *
    * @method Open
    *
    * This method is called to open the modal, this will made the modal visible and begin any animations.
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DaModal.prototype.Open = function() {
      this._container.visible = true;
      this._animating = true;
      this._screen.alpha = 0;
      this._modCont.x = -this._daRef._canvRef.width;
      createjs.Tween.get(this._screen).to({
        alpha: 1
      }, 200, createjs.Ease.linear()).call((function(_this) {
        return function() {
          return createjs.Tween.get(_this._modCont).to({
            x: 0
          }, 500, createjs.Ease.linear()).call(function() {
            _this._animating = false;
            _this._opened = true;
            if (_this._options.playSound) {
              return createjs.Sound.play(_this._options.playSound);
            }
          });
        };
      })(this));
    };


    /**
    *
    * @method Close
    *
    * This method is called to close the modal, this will call any closing animations then set the modal to invisible.
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DaModal.prototype.Close = function(callback) {
      this._animating = true;
      createjs.Tween.get(this._modCont).to({
        x: -this._daRef._canvRef.width
      }, 500, createjs.Ease.linear()).call((function(_this) {
        return function() {
          return createjs.Tween.get(_this._screen).to({
            alpha: 0
          }, 200, createjs.Ease.linear()).call(function() {
            _this._animating = false;
            _this._opened = false;
            if (callback) {
              callback();
            }
            return createjs.Sound.stop();
          });
        };
      })(this));
    };

    DaModal.prototype.Disable = function() {
      var butt, i, len, ref, results;
      ref = this._buttons;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        butt = ref[i];
        results.push(butt.Disable());
      }
      return results;
    };

    DaModal.prototype.Enable = function() {
      var butt, i, len, ref, results;
      ref = this._buttons;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        butt = ref[i];
        results.push(butt.Enable());
      }
      return results;
    };

    return DaModal;

  })();

}).call(this);
