// Generated by CoffeeScript 1.10.0

/**
*
* The DaToolbarManager Class contains all of the main features and properties for the common drawing area
*
* @class DaToolbarManager
*
* @author C.J. Morrison
*
* @since 10/12/2016
*
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.DaToolbarManager = (function() {

    /**
    *
    * Array of DaToolbar objects asscioated with this drawing area
    *
    * @property _toolbars
    *
    * @type {Array}
    *
    * @default void 0
    *
     */
    DaToolbarManager.prototype._toolbars = void 0;


    /**
    *
    * Drawing Area Reference, this will reference the Drawing Area this Button is associated with.
    *
    * @property _daRef
    *
    * @type {DrawingArea}
    *
    * @default void 0
    *
     */

    DaToolbarManager.prototype._daRef = void 0;


    /**
    *
    * Drawing Area Manager Reference, this will reference the Drawing Area Manager that the Drawing area that contains this button is associated with.
    *
    * @property _daManagerRef
    *
    * @type {DrawingAreaManager}
    *
    * @default void 0
    *
     */

    DaToolbarManager.prototype._daManagerRef = void 0;


    /**
    *
    * Constructor will define the properties for this class and call Build method
    *
    * @method DaToolbarManager
    * 
    * @param daRef - Drawing Area Reference.
    * @return void 0
    *
     */

    function DaToolbarManager(daRef) {
      this.DisableAll = bind(this.DisableAll, this);
      this.EnableAll = bind(this.EnableAll, this);
      this.GetToolbar = bind(this.GetToolbar, this);
      this.HandleResizeEvent = bind(this.HandleResizeEvent, this);
      this.CloseRequest = bind(this.CloseRequest, this);
      this.BuildToolbars = bind(this.BuildToolbars, this);
      this._daRef = daRef;
      this._daManagerRef = daRef._managerRef;
      this._toolbars = [];
      return;
    }


    /**
    *
    * This will build all of the DaToolbar objects associated with this Drawing area.
    *
    * @method BuildToolbars
    * 
    * @param useTbs - an array of tool bars to use, if undefined this will use a default set.
    * @param callback - since tool bars are external JSON sheets a callback will occur after these data sheets are loaded.
    * @return void 0
    *
     */

    DaToolbarManager.prototype.BuildToolbars = function(useTbs, callback) {
      var checkCompletion, completedRes, tb, tbData;
      if (!useTbs) {
        tb = new DaToolbar(this, {
          id: "main"
        });
        this._toolbars.push(tb);
      }
      checkCompletion = (function(_this) {
        return function() {
          _this.CloseRequest();
          if (completedRes === useTbs.length) {
            if (callback) {
              return callback();
            }
          }
        };
      })(this);
      if (useTbs.constructor === Array) {
        completedRes = 0;
        tb = 0;
        while (tb < useTbs.length) {
          tbData = JSON.parse(this._daManagerRef._loadedAssets.getResult(useTbs[tb]));
          if (tbData.options.resources) {
            this._daRef.PreloadDataResoucres(tbData.options.resources, (function(_this) {
              return function() {
                _this._toolbars.push(new DaToolbar(_this, tbData));
                completedRes++;
                return checkCompletion();
              };
            })(this));
          } else {
            this._toolbars.push(new DaToolbar(this, tbData));
            completedRes++;
            checkCompletion();
          }
          tb++;
        }
      }
    };


    /**
    *
    * This call the CloseRequest method of each toolbar assuring all toggles and flyout are deactivated and reset.
    *
    * @method CloseRequest
    * 
    * @param  void 0
    * @return void 0
    *
     */

    DaToolbarManager.prototype.CloseRequest = function() {
      var i, len, ref, tb;
      ref = this._toolbars;
      for (i = 0, len = ref.length; i < len; i++) {
        tb = ref[i];
        tb.CloseRequest();
      }
    };


    /**
    *
    * This method is called when a windows resize event occurs. This will call the HandleResizeEvent of each toolbar.
    *
    * @method HandleResizeEvent
    * 
    * @param  evt:Event - the windows resize event.
    * @return void 0
    *
     */

    DaToolbarManager.prototype.HandleResizeEvent = function(evt) {
      var i, len, ref, tb;
      ref = this._toolbars;
      for (i = 0, len = ref.length; i < len; i++) {
        tb = ref[i];
        tb.HandleResizeEvent();
      }
    };


    /**
    *
    * This method will retrieve the toolbar with the provided id 
    *
    * @method GetToolbar
    * 
    * @param  tbId:String - The id of the toolbar to retrieve
    * @return void 0
    *
     */

    DaToolbarManager.prototype.GetToolbar = function(tbId) {
      var i, len, ref, tb;
      ref = this._toolbars;
      for (i = 0, len = ref.length; i < len; i++) {
        tb = ref[i];
        if (tb._id === tbId) {
          return tb;
        }
      }
    };


    /**
    *
    * This method will enable all toggles within all toolbars in the drawing area
    *
    * @method EnableAll
    * 
    * @param  void 0
    * @return void 0
    *
     */

    DaToolbarManager.prototype.EnableAll = function() {
      var i, len, ref, tb;
      ref = this._toolbars;
      for (i = 0, len = ref.length; i < len; i++) {
        tb = ref[i];
        tb.Enable();
      }
    };


    /**
    *
    * This method will disable all toggles within all toolbars in the drawing area
    *
    * @method EnableAll
    * 
    * @param  void 0
    * @return void 0
    *
     */

    DaToolbarManager.prototype.DisableAll = function() {
      var i, len, ref, tb;
      ref = this._toolbars;
      for (i = 0, len = ref.length; i < len; i++) {
        tb = ref[i];
        tb.Disable();
      }
    };

    return DaToolbarManager;

  })();

}).call(this);
