// Generated by CoffeeScript 1.10.0

/**
*
* The DaToolbar
*
* @class DaToolbarManager
*
* @author C.J. Morrison
*
* @since 10/12/2016
*
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.DaToolbar = (function() {

    /**
    *
    * ID associated with object, this is used for searching and selecting, this is required and must be unique
    *
    * @property _id
    *
    * @type {String}
    *
    * @default void 0
    *
     */
    DaToolbar.prototype._id = void 0;


    /**
    *
    * Drawing Area Reference, this will reference the Drawing Area this Button is associated with.
    *
    * @property _daRef
    *
    * @type {DrawingArea}
    *
    * @default void 0
    *
     */

    DaToolbar.prototype._daRef = void 0;


    /**
    *
    * Drawing Area Manager Reference, this will reference the Drawing Area Manager that the Drawing area that contains this button is associated with.
    *
    * @property _daManagerRef
    *
    * @type {DrawingAreaManager}
    *
    * @default void 0
    *
     */

    DaToolbar.prototype._daManagerRef = void 0;


    /**
    *
    * An array of options with their values
    *
    * @property _options
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DaToolbar.prototype._options = void 0;


    /**
    *
    * The width of this button
    *
    * @property _width
    *
    * @type {Number}
    *
    * @default 0
    *
     */

    DaToolbar.prototype._width = void 0;


    /**
    *
    * The height of this button
    *
    * @property _height
    *
    * @type {Number}
    *
    * @default 0
    *
     */

    DaToolbar.prototype._height = void 0;


    /**
    *
    * Is the button currently enabled, if false the button will not accept mouse input. 
    *
    * @property _enabled
    *
    * @type {Boolean}
    *
    * @default 0
    *
     */

    DaToolbar.prototype._enabled = void 0;


    /**
    *
    * Toolbar Manager Reference, this will reference the Toolbar manager and allow it control over this toolbar.
    *
    * @property _tbManRef
    *
    * @type {DaToolbarManager}
    *
    * @default void 0
    *
     */

    DaToolbar.prototype._tbManRef = void 0;


    /**
    *
    * This object contains the JSON data for the various toggles/subtoggles assciated with this toolbar
    *
    * @property _togglesData
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DaToolbar.prototype._togglesData = void 0;


    /**
    *
    * This array contains Built toggles that are in this toolbar, this excludes subtoggles
    *
    * @property _toggles
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DaToolbar.prototype._toggles = void 0;


    /**
    *
    * This is an array of all of the flyout containers assciated with this toolbar
    *
    * @property _flyouts
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DaToolbar.prototype._flyouts = void 0;


    /**
    *
    * Constructor will define the properties for this class and call Build method
    *
    * @method DaToolbar
    * 
    * @param daRef - Drawing Area Reference.
    * @param options - array of options and values for this button (includes id)
    * @return void 0
    *
     */

    function DaToolbar(tbmRef, options) {
      this.Disable = bind(this.Disable, this);
      this.Enable = bind(this.Enable, this);
      this.HandleResizeEvent = bind(this.HandleResizeEvent, this);
      this.GetTbToggle = bind(this.GetTbToggle, this);
      this.BuildTBDivider = bind(this.BuildTBDivider, this);
      this.BuildTBToggleSet = bind(this.BuildTBToggleSet, this);
      this.BuildTBToggleSets = bind(this.BuildTBToggleSets, this);
      this.CloseRequest = bind(this.CloseRequest, this);
      this.BuildSubToggles = bind(this.BuildSubToggles, this);
      this.BuildFlyout = bind(this.BuildFlyout, this);
      this.BuildFlyouts = bind(this.BuildFlyouts, this);
      this.DrawBackground = bind(this.DrawBackground, this);
      this.Build = bind(this.Build, this);
      this._tbManRef = tbmRef;
      this._daRef = tbmRef._daRef;
      this._daManagerRef = tbmRef._daManagerRef;
      this._options = options.options;
      this._id = options.ID;
      this._toggles = [];
      this._togglesData = options.toggleSets;
      this._enabled = true;
      this._width = 0;
      this._height = 0;
      this.Build(options);
      return this;
    }


    /**
    *
    * @method Build
    *
    * Defines the Toolbar container, background, toggles and flyouts
    *
    * @param void 0 
    * @return this
    *
     */

    DaToolbar.prototype.Build = function() {
      var toolbar;
      toolbar = new createjs.Container;
      toolbar.addChild(this.DrawBackground());
      toolbar._id = this._id;
      if (this._options.xPos) {
        toolbar.x = this._options.xPos;
      }
      if (this._options.yPos) {
        toolbar.y = this._options.yPos;
      }
      if (!this._options.padding) {
        this._options.padding = [0, 0];
      } else if (this._options.padding.constructor === Number) {
        this._options.padding = [this._options.padding, this._options.padding];
      }
      if (!this._options.flyoutOptions) {
        this._options.flyoutOptions = {};
      }
      if (!this._options.flyoutOptions.useDivider) {
        this._options.flyoutOptions.useDivider = {};
      }
      if (!this._options.flyoutOptions.padding) {
        this._options.flyoutOptions.padding = [0, 0];
      } else if (this._options.flyoutOptions.padding.constructor === Number) {
        this._options.flyoutOptions.padding = [this._options.flyoutOptions.padding, this._options.flyoutOptions.padding];
      }
      if (!this._options.flyoutOptions.posOffset[0]) {
        this._options.flyoutOptions.posOffset = [0, 0];
      } else if (this._options.flyoutOptions.posOffset.constructor === Number) {
        this._options.flyoutOptions.posOffset = [this._options.flyoutOptions.posOffset, this._options.flyoutOptions.posOffset];
      }
      this.BuildFlyouts(toolbar);
      this.BuildTBToggleSets(toolbar);
      this._daRef._displayLayers.toolbars.addChild(toolbar);
      return this;
    };


    /**
    *
    * @method DrawBackground
    *
    * with the _options this will generate a createJS.Container with various background shapes
    *
    * @param Void 0  
    * @return Void 0 
    *
     */

    DaToolbar.prototype.DrawBackground = function() {
      var bitmap, fillColor, height, i, len, obj, radius, ref, toolbarBG, toolbarBGcont, width;
      toolbarBGcont = this._tbManRef._daRef.GetDaObjectById(this._id + "_toolbarBG");
      if (!toolbarBGcont) {
        toolbarBGcont = new createjs.Container;
        toolbarBGcont._id = this._id + "_toolbarBG";
      } else {
        toolbarBGcont.removeAllChildren();
      }
      if (!this._options.useBackground) {
        toolbarBG = new createjs.Shape;
        toolbarBG.graphics.beginFill("RGB(200, 200, 200)");
        toolbarBG.graphics.rect(0, 0, 50, this._daRef._cjsStage.canvas.height);
        toolbarBGcont.addChild(toolbarBG);
        toolbarBG = new createjs.Shape;
        toolbarBG.graphics.beginFill("RGB(170, 170, 170)");
        toolbarBG.graphics.rect(47, 0, 3, this._daRef._cjsStage.canvas.height);
        toolbarBGcont.addChild(toolbarBG);
        this._width = 50;
        this._height = this._daRef._cjsStage.canvas.height;
      } else if (this._options.useBackground) {
        if (this._options.useBackground.constructor === String) {
          bitmap = new createjs.Bitmap(this._options.useBackground);
          toolbarBGcont.addChild(bitmap);
          this._width = bitmap.width;
          this._height = bitmap.height;
        } else if (this._options.useBackground.constructor === Object) {
          this._options.useBackground = [this._options.useBackground];
        }
        if (this._options.useBackground.constructor === Array) {
          ref = this._options.useBackground;
          for (i = 0, len = ref.length; i < len; i++) {
            obj = ref[i];
            if (obj.fillColor) {
              fillColor = obj.fillColor;
            } else {
              fillColor = "RGB(200, 200, 200)";
            }
            if (obj.width) {
              width = obj.width;
            } else {
              width = 50;
            }
            this._width = Math.max(this._width, width);
            if (obj.height) {
              height = obj.height;
            } else {
              height = this._daRef._cjsStage.canvas.height;
            }
            this._height = Math.max(this._height, height);
            if (obj.radius) {
              if (obj.radius.constructor === Number) {
                radius = [obj.radius, obj.radius, obj.radius, obj.radius];
              } else if (obj.radius.constructor === Array) {
                if (obj.radius.length === 2) {
                  radius = [obj.radius[0], obj.radius[0], obj.radius[1], obj.radius[1]];
                } else if (obj.radius.length === 4) {
                  radius = obj.radius;
                }
              }
            } else {
              radius = [0, 0, 0, 0];
            }
            toolbarBG = new createjs.Shape;
            if (obj.strokeWidth) {
              toolbarBG.graphics.setStrokeStyle(obj.strokeWidth, "round");
            }
            if (obj.strokeColor) {
              toolbarBG.graphics.beginStroke(obj.strokeColor);
            }
            toolbarBG.graphics.beginFill(fillColor);
            toolbarBG.graphics.drawRoundRectComplex(0, 0, width, height, radius[0], radius[1], radius[2], radius[3]);
            toolbarBGcont.addChild(toolbarBG);
          }
        }
      }
      return toolbarBGcont;
    };


    /**
    *
    * @method BuildFlyouts
    *
    * This method uses the Toggle data to see wich of the toggles have sub toggles, using this Flyout containers are built to hold the sub toggles.
    *
    * @param owner:CreateJS.continer - this toolbars container 
    * @return Void 0
    *
     */

    DaToolbar.prototype.BuildFlyouts = function(owner) {
      var atYpos, fo, tc, tdIndex;
      this._flyouts = [];
      if (this._togglesData.constructor === Array) {
        atYpos = 0;
        tc = 0;
        while (tc < this._togglesData.length) {
          tdIndex = 0;
          while (tdIndex < this._togglesData[tc].contents.length) {
            if (this._togglesData[tc].contents[tdIndex].subToggles && this._togglesData[tc].contents[tdIndex].subToggles.length !== 0) {
              fo = this.BuildFlyout(owner, this._togglesData[tc].contents[tdIndex]);
              fo.clusterId = tc;
              fo.scaleX = 0;
            }
            atYpos = atYpos + (45 * tdIndex);
            tdIndex++;
          }
          atYpos += 9;
          tc++;
        }
      } else {
        tdIndex = 0;
        while (tdIndex < this._togglesData.contents.length) {
          if (this._togglesData.contents[tdIndex].subToggles && this._togglesData.contents[tdIndex].subToggles.length !== 0) {
            fo = this.BuildFlyout(owner, this._togglesData.contents[tdIndex]);
            fo.scaleX = 0;
          }
          tdIndex++;
        }
      }
    };


    /**
    *
    * @method BuildFlyout
    *
    * Called from BuildFlyouts as needed. This method build a flyout container including the background shapes and sub toggle objects.
    * since flyouts are not a class (this may change later) the popin and popout methods are defined and applied the the container directly. 
    * eatch flyout is added to the owner provided.
    *
    * @param owner:CreateJS.continer - this toolbars container 
    * @param data:object - Json data specific to the flyout 
    * @return this
    *
     */

    DaToolbar.prototype.BuildFlyout = function(owner, data) {
      var fillColor, flyout, flyoutBG, height, i, j, len, len1, obj, radius, ref, ref1, stog, width;
      flyout = new createjs.Container;
      flyout._id = data.id + "_flyout";
      flyout._width = 0;
      flyout._height = 0;
      if (!data.subToggles) {
        data.subToggles = [];
      }
      flyout.subTogglesData = data.subToggles;
      if (flyout.subTogglesData) {
        ref = flyout.subTogglesData;
        for (i = 0, len = ref.length; i < len; i++) {
          stog = ref[i];
          stog.togSize = data.togSize;
          if (!stog.resource) {
            stog.resource = data.resource;
          }
          stog.isSubToggle = true;
          stog.flyoutRef = flyout;
        }
        flyout.subToggles = [];
        this.BuildSubToggles(flyout);
      }
      if (!this._options.flyoutOptions.useBackground) {
        flyoutBG = new createjs.Shape;
        flyoutBG.graphics.beginFill("RGB(200, 200, 200)");
        flyoutBG.graphics.rect(0, 0, 350, 45);
        flyout.addChildAt(flyoutBG, 0);
        flyoutBG = new createjs.Shape;
        flyoutBG.graphics.beginFill("RGB(170, 170, 170)");
        flyoutBG.graphics.rect(347, 0, 3, 45);
        flyout.addChildAt(flyoutBG, 1);
      } else {
        if (this._options.flyoutOptions.useBackground.constructor === String) {
          toolbarBGcont.addChild(new createjs.Bitmap(this._options.flyoutOptions.useBackground));
        } else if (this._options.flyoutOptions.useBackground.constructor === Object) {
          this._options.flyoutOptions.useBackground = [this._options.flyoutOptions.useBackground];
        }
        if (this._options.flyoutOptions.useBackground.constructor === Array) {
          ref1 = this._options.flyoutOptions.useBackground;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            obj = ref1[j];
            if (obj.fillColor) {
              fillColor = obj.fillColor;
            } else {
              fillColor = "RGB(200, 200, 200)";
            }
            if (obj.width) {
              width = obj.width;
            } else {
              width = flyout.togWidth + (this._options.flyoutOptions.padding[0] * 2);
            }
            flyout._width = Math.max(flyout._width, width);
            if (obj.height) {
              height = obj.height;
            } else {
              height = 45;
            }
            flyout._height = Math.max(flyout._height, height);
            if (obj.radius) {
              if (obj.radius.constructor === Number) {
                radius = [obj.radius, obj.radius, obj.radius, obj.radius];
              } else if (obj.radius.constructor === Array) {
                if (obj.radius.length === 2) {
                  radius = [obj.radius[0], obj.radius[0], obj.radius[1], obj.radius[1]];
                } else if (obj.radius.length === 4) {
                  radius = obj.radius;
                }
              }
            } else {
              radius = [0, 0, 0, 0];
            }
            flyoutBG = new createjs.Shape;
            if (obj.strokeWidth) {
              flyoutBG.graphics.setStrokeStyle(obj.strokeWidth, "round");
            }
            if (obj.strokeColor) {
              flyoutBG.graphics.beginStroke(obj.strokeColor);
            }
            flyoutBG.graphics.beginFill(fillColor);
            flyoutBG.graphics.drawRoundRectComplex(0, 0, width, height, radius[0], radius[1], radius[2], radius[3]);
            flyout.addChildAt(flyoutBG, 0);
          }
        }
      }
      flyout.Popout = (function(_this) {
        return function(foTarg) {
          var PopOutTween;
          PopOutTween = createjs.Tween.get(foTarg, {});
          PopOutTween.to({
            scaleX: 1
          }, 300, createjs.Ease.quadInOut);
          return _this._daRef.ActivateScreenUI();
        };
      })(this);
      flyout.PopIn = (function(_this) {
        return function(foTarg) {
          var PopInTween;
          PopInTween = createjs.Tween.get(foTarg, {});
          return PopInTween.to({
            scaleX: 0
          }, 300, createjs.Ease.quadInOut);
        };
      })(this);
      this._flyouts.push(flyout);
      owner.addChildAt(flyout, 0);
      return this;
    };


    /**
    *
    * @method BuildSubToggles
    *
    * Called from BuildFlyout as needed. this Method will build daToolbarToggles as required, providing them with the needed data.
    *
    * @param flyout:CreateJS.continer - the flyout object
    * @return Void 0
    *
     */

    DaToolbar.prototype.BuildSubToggles = function(flyout) {
      var tdIndex, toggle, width;
      tdIndex = 0;
      width = 0;
      while (tdIndex < flyout.subTogglesData.length) {
        toggle = new DaToolbarToggle(this, flyout.subTogglesData[tdIndex]);
        toggle.Move(width + this._options.flyoutOptions.padding[0], this._options.flyoutOptions.padding[1]);
        toggle._flyoutRef = flyout;
        width += toggle._width;
        flyout.addChild(toggle._container);
        flyout.subToggles.push(toggle);
        tdIndex++;
      }
      flyout.togWidth = width;
    };


    /**
    *
    * @method CloseRequest
    *
    * Called from the Drawing area in some cases, this will close all opened flyouts and deactivate all toggles
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DaToolbar.prototype.CloseRequest = function() {
      var i, len, ref, tog;
      ref = this._toggles;
      for (i = 0, len = ref.length; i < len; i++) {
        tog = ref[i];
        if (tog.Deactivate) {
          tog.Deactivate();
        }
      }
    };


    /**
    *
    * @method BuildTBToggleSets
    *
    * Builds the toggles within the toolbar as a cluster, these toggles are linked so only one mat be active at once.
    *
    * @param toolbar:CreateJS.continer - the container of the toolbar
    * @return Void 0
    *
     */

    DaToolbar.prototype.BuildTBToggleSets = function(toolbar) {
      var atYpos, i, len, ref, tc, tcc;
      if (this._togglesData.constructor === Array) {
        atYpos = 0;
        tc = 0;
        while (tc < this._togglesData.length) {
          ref = this._togglesData[tc].contents;
          for (i = 0, len = ref.length; i < len; i++) {
            tcc = ref[i];
            tcc.clusterId = tc;
            tcc.clustered = this._togglesData[tc].cluster;
          }
          atYpos = this.BuildTBToggleSet(this._togglesData[tc].contents, toolbar, atYpos);
          if (tc !== this._togglesData.length - 1) {
            atYpos = this.BuildTBDivider(toolbar, atYpos);
          }
          tc++;
        }
      } else {
        this.BuildTBToggleSet(this._togglesData.contents, toolbar);
      }
    };


    /**
    *
    * @method BuildTBToggleSet
    *
    * called from BuildTBToggleSets this builds the indiviual toggles withing the clusters aligning their assciated flyout to them
    *
    * @param setData:CreateJS.continer - the data object for the toggles in this set
    * @param toolbar:CreateJS.continer - the container of the toolbar
    * @param initYpos:Number -  the y posistion of the items in this cluster
    * @return Number - the y posistion to begin the next item at
    *
     */

    DaToolbar.prototype.BuildTBToggleSet = function(setData, toolbar, initYpos) {
      var diffFactor, fo, hDiff, i, len, ref, tdIndex, toggle, xpos, ypos;
      if (!initYpos) {
        initYpos = 0;
      }
      tdIndex = 0;
      while (tdIndex < setData.length) {
        toggle = new DaToolbarToggle(this, setData[tdIndex]);
        xpos = this._options.padding[0];
        ypos = (this._options.padding[1] + initYpos) + (50 * tdIndex);
        toggle.Move(xpos, ypos);
        ref = this._flyouts;
        for (i = 0, len = ref.length; i < len; i++) {
          fo = ref[i];
          if (fo._id === toggle._id + "_flyout") {
            toggle._flyoutRef = fo;
            hDiff = toggle._height - toggle._flyoutRef._height;
            if (hDiff > 0) {
              diffFactor = hDiff / 2;
            } else {
              diffFactor = 0;
            }
            toggle._flyoutRef.y = ypos + diffFactor + this._options.flyoutOptions.posOffset[1];
            toggle._flyoutRef.x = this._width + this._options.flyoutOptions.posOffset[0];
          }
        }
        toolbar.addChild(toggle._container);
        this._toggles.push(toggle);
        tdIndex++;
      }
      return (5 + initYpos) + (50 * tdIndex);
    };


    /**
    *
    * @method BuildTBDivider
    *
    * This method builds a small divider shape, this appears when defined in the JSON data as a mean of chunking toogles.
    *
    * @param toolbar:CreateJS.continer - the container of the toolbar
    * @param atYpos:Number - the y posistion of the divider.
    * @return Number - the y posistion to begin the next item at
    *
     */

    DaToolbar.prototype.BuildTBDivider = function(toolbar, atYpos) {
      var divLine, dividerOps;
      dividerOps = this._options.flyoutOptions.useDivider;
      divLine = new createjs.Shape;
      if (!dividerOps.fillColor) {
        divLine.graphics.beginFill("RGB(170, 170, 170)");
      } else {
        divLine.graphics.beginFill(dividerOps.fillColor);
      }
      divLine.graphics.rect(3, atYpos + 1, 42, 2);
      toolbar.addChild(divLine);
      return atYpos + 4;
    };


    /**
    *
    * @method GetTbToggle
    *
    * gets the requested toggle by the provided ID
    *
    * @param togID:String - the ID of the provided toolbar
    * @return daToolbarToggle | false if not found
    *
     */

    DaToolbar.prototype.GetTbToggle = function(togID) {
      var i, len, ref, tog;
      ref = this._toggles;
      for (i = 0, len = ref.length; i < len; i++) {
        tog = ref[i];
        if (tog._id === togId) {
          return tog;
        }
      }
      return false;
    };


    /**
    *
    * @method HandleResizeEvent
    *
    * called in the event the window size is altered this will redraw the background to the corrected size and posistion
    *
    * @param evt:Event - window resize event
    * @return void 0
    *
     */

    DaToolbar.prototype.HandleResizeEvent = function(evt) {
      this.DrawBackground();
    };


    /**
    *
    * @method Enable
    *
    * enables all of the toggles and flyouts in the toolbar
    *
    * @param void 0
    * @return void 0
    *
     */

    DaToolbar.prototype.Enable = function() {
      var i, len, ref, tog;
      ref = this._toggles;
      for (i = 0, len = ref.length; i < len; i++) {
        tog = ref[i];
        if (tog.Enable) {
          tog.Enable();
        }
      }
      this._enabled = true;
    };


    /**
    *
    * @method Disable
    *
    * disables all of the toggles and flyouts in the toolbar
    *
    * @param void 0
    * @return void 0
    *
     */

    DaToolbar.prototype.Disable = function() {
      var i, len, ref, tog;
      ref = this._toggles;
      for (i = 0, len = ref.length; i < len; i++) {
        tog = ref[i];
        if (tog.Disable) {
          tog.Disable();
        }
      }
      this._enabled = false;
    };

    return DaToolbar;

  })();

}).call(this);
