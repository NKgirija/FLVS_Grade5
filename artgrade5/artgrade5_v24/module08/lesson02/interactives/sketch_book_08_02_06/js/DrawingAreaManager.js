// Generated by CoffeeScript 1.10.0
(function() {
  var D2LDEBUG,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  D2LDEBUG = true;


  /**
  *
  * The DrawingAreaManager Class will retrive the libaries needed for the drawing areas and manage multiple drawing area objects.
  *
  * @class DrawingArea
  *
  * @author C.J. Morrison
  *
  * @since 10/12/2016
  *
   */

  window.DrawingAreaManager = (function() {

    /**
    *
    * Bool if the object is ready to set areas
    *
    * @property _initalized
    *
    * @type {Boolean}
    *
    * @default false
    *
     */
    DrawingAreaManager.prototype._initalized = false;


    /**
    *
    * Determines which of the 3 preloading phases is currently occuring
    *
    * @property _preloadPhase
    *
    * @type {Number}
    *
    * @default 0
    *
     */

    DrawingAreaManager.prototype._preloadPhase = 0;


    /**
    *
    * FPS settign for all draw areas,
    *
    * @property _fpsRendering
    *
    * @type {Number}
    *
    * @default 12
    *
     */

    DrawingAreaManager.prototype._fpsRendering = 24;


    /**
    *
    * Holds string loction of the default Javascript files.
    *
    * @property _externalLibaries
    *
    * @type {Array}
    *
    * @default [] (CreateJS libaries)
    *
     */

    DrawingAreaManager.prototype._externalLibaries = ["lib/easeljs-0.8.2.min.js", "lib/preloadjs-0.6.2.min.js", "lib/tweenjs-0.6.2.min.js", "lib/soundjs-0.6.2.min.js", "lib/FileSaver/FileSaver.min.js", "lib/canvas-toBlob/canvas-toBlob.js", "lib/jspdf.min.js", "js/DaPreload.js", "js/DaModal.js", "js/DaWalkthrough.js", "js/drawingArea.js", "js/DaButton.js", "js/DaTooltip.js", "js/DaToolbarManager.js", "js/DaToolbar.js", "js/DaToolbarToggle.js"];


    /**
    *
    * Holds string loction of the default audio files.
    *
    * @property _defaultAudio
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DrawingAreaManager.prototype._defaultAudio = [
      {
        src: "audio/defaults/select.mp3",
        id: "def_select"
      }
    ];


    /**
    *
    * Holds string loction of the default images and data files.
    *
    * @property _PreloadResourceList
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DrawingAreaManager.prototype._PreloadResourceList = [
      {
        src: "img/loading_bg.png",
        id: "loader_bg"
      }, {
        src: 'img/playScreen.png',
        id: 'playScreenBG'
      }, {
        src: 'img/playSprites.png',
        id: 'playSpritesImg'
      }
    ];


    /**
    *
    * Holds Resource list to be qued for preloading.
    *
    * @property _resourcesList
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DrawingAreaManager.prototype._resourcesList = [
      {
        src: "css/defaults/daDefaults.css",
        id: "daDefaultStyles"
      }, {
        src: "data/defaults/standardDaToolbar.txt",
        id: "stnd_def_data"
      }, {
        src: "data/defaults/lang_EN.txt",
        id: "stnd_def_lang_EN"
      }, {
        src: "img/defaults/1x1.png",
        id: "nullPixel"
      }, {
        src: "img/defaults/blankCanvas.png",
        id: "blankCanvas"
      }, {
        src: "img/defaults/stnd_def_sm.png",
        id: "stnd_def_sm"
      }
    ];


    /**
    *
    * Holds assets which have already been preloaded.
    *
    * @property _loadedAssets
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DrawingAreaManager.prototype._loadedAssets = [];


    /**
    *
    * Holds canvas elements which will become Drawing areas upon loading of the manager.
    *
    * @property _requestedDrawingAreas
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DrawingAreaManager.prototype._requestedDrawingAreas = [];


    /**
    *
    * Holds Drawing Area Objects
    *
    * @property _DrawAreas
    *
    * @type {Array}
    *
    * @default []
    *
     */

    DrawingAreaManager.prototype._DrawAreas = [];


    /**
    *
    * This will adjust text to solve a CreateJS with text alignment in FireFox
    * https://github.com/CreateJS/EaselJS/issues/235
    *
    * @property _FFtextAdjust
    *
    * @type {Boolean}
    *
    * @default false
    *
     */

    DrawingAreaManager.prototype._FFtextAdjust = false;


    /**
    *
    * Event trigged when manager is ready
    *
    * @property onReady
    *
    * @type Function
    *
    * @default undefined
    *
     */

    DrawingAreaManager.prototype.onReady = void 0;


    /**
    *
    * The DeafultFont to use in all text elements. (exluces DoM text)
    *
    * @property _defaultFont
    *
    * @type String
    *
    * @default "Calibri"
    *
     */

    DrawingAreaManager.prototype._defaultFont = void 0;


    /**
    *
    * a scale differance between the default font and defaultMacfont
    *
    * @property _fontScaleAdjust
    *
    * @type number
    *
    * @default 1
    *
     */

    DrawingAreaManager.prototype._fontScaleAdjust = void 0;


    /**
    *
    * The Deafult Mac Font to use in all text elements when the device is a Mac. (exluces DoM text)
    *
    * @property _defaultMacFont
    *
    * @type String
    *
    * @default "Open Sans"
    *
     */

    DrawingAreaManager.prototype._defaultMacFont = void 0;


    /**
    *
    * List of available DACA events 
    *
    * @property _DacaCommands
    *
    * @type Function
    *
    * @default array
    *
     */

    DrawingAreaManager.prototype._DacaCommands = ["DrawColor", "DrawSize", "PenType", "PenOpacity", "Fade", "StampMode", "StampSelection", "EraseMode", "Undo", "Redo", "Clear", "DownloadImage", "PrintImage", "OpenModal", "CloseModal", "OpenSlideInstructions", "StartWalkthrough", "RequestWalkthrough", "SlideNav"];


    /**
    *
    * Constructor will define the binds for this class
    *
    * @method DrawingAreaManager
    *
     */

    function DrawingAreaManager(preventInit) {
      this.HexToRGBA = bind(this.HexToRGBA, this);
      this.GetLang = bind(this.GetLang, this);
      this.ParseDataText = bind(this.ParseDataText, this);
      this.HandleResizeEvent = bind(this.HandleResizeEvent, this);
      this.CustomEventCall = bind(this.CustomEventCall, this);
      this.IsDacaString = bind(this.IsDacaString, this);
      this.DACA = bind(this.DACA, this);
      this.GetDrawingArea = bind(this.GetDrawingArea, this);
      this.SetDrawingArea = bind(this.SetDrawingArea, this);
      this.RequestInitDas = bind(this.RequestInitDas, this);
      this.RequestPreloadAnimations = bind(this.RequestPreloadAnimations, this);
      this.getScript = bind(this.getScript, this);
      this.HandleCJSTick = bind(this.HandleCJSTick, this);
      this.PreloadResources = bind(this.PreloadResources, this);
      this.PreloadAudio = bind(this.PreloadAudio, this);
      this.loadScript = bind(this.loadScript, this);
      this.InitPhase3 = bind(this.InitPhase3, this);
      this.InitPhase2 = bind(this.InitPhase2, this);
      this.RequestDrawingArea = bind(this.RequestDrawingArea, this);
      this.Init = bind(this.Init, this);
      if (!preventInit) {
        this.Init();
      }
      return;
    }


    /**
    * @method Init
    *
    * This will begin phase 1 of the loading process, this phase loads the libraries needed to
    * manage drawing areas including CreateJS.
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DrawingAreaManager.prototype.Init = function() {
      this.d2log('preloading phase 1');
      this._preloadPhase = 1;
      this._defaultFont = "Calibri";
      this._defaultMacFont = "Open Sans";
      this._FFtextAdjust = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
      if (navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i)) {
        this._defaultFont = this._defaultMacFont;
        this._fontScaleAdjust = .8;
      } else {
        this._fontScaleAdjust = 1;
      }
      return this.loadScript(this._externalLibaries, this.InitPhase2);
    };


    /**
    * @method RequestDrawingArea
    *
    * This will add Canvas information to an array. once the Manager has completed loading the requested canvas will be set as a drawing area.
    * should this be called after the initialization process this function will just set the area directly.
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DrawingAreaManager.prototype.RequestDrawingArea = function(canvasID, options) {
      if (!this._initalized) {
        return this._requestedDrawingAreas.push({
          "canvasID": canvasID,
          "options": options
        });
      } else {
        return this.SetDrawingArea(canvasID, options);
      }
    };


    /**
    * @method InitPhase2
    *
    * called after the libraries in Phase 1 have all loaded.
    * This will use CreateJS to display a preloading animation. once the animation has begun Phase 3 is called
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DrawingAreaManager.prototype.InitPhase2 = function() {
      this.d2log('preloading phase 2');
      this._preloadPhase = 2;
      return this.PreloadResources(this._PreloadResourceList, (function(_this) {
        return function() {
          createjs.Ticker.addEventListener("tick", _this.HandleCJSTick);
          createjs.Ticker.framerate = _this._fpsRendering;
          return _this.InitPhase3();
        };
      })(this));
    };


    /**
    * @method InitPhase3
    *
    * called after Phase 2. This phase loads in all external default images and data files, than all audio using SoundJS.
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DrawingAreaManager.prototype.InitPhase3 = function() {
      this.d2log('preloading phase 3');
      this._preloadPhase = 3;
      this.RequestPreloadAnimations();
      this.PreloadResources(this._resourcesList, (function(_this) {
        return function() {
          return _this.PreloadAudio(_this._defaultAudio, function() {
            _this._initalized = true;
            _this.RequestInitDas();
            if (_this.onReady && _this.onReady.constructor === Function) {
              return _this.onReady();
            }
          });
        };
      })(this));
      return window.addEventListener("resize", this.HandleResizeEvent);
    };


    /**
    * @method loadScript
    *
    * used prior the Preload JS, this will load in Javascript libraries
    *
    * @param Manifest:Array - an array of links to libraries.
    * @param lsCallback:Function - a function to call once the libraries are all loaded.
    * @param usePos:Int - this will start the loading process at the provided index of the manifest (defaulted to 0)
    * @return Void 0
    *
     */

    DrawingAreaManager.prototype.loadScript = function(manifest, lsCallback, usePos) {
      var AssetPos;
      if (usePos === void 0) {
        AssetPos = 0;
      } else {
        AssetPos = usePos;
      }
      this.getScript(manifest[AssetPos], (function(_this) {
        return function() {
          AssetPos++;
          if (AssetPos === manifest.length) {
            if (lsCallback && lsCallback.constructor === Function) {
              return lsCallback();
            }
          } else {
            return _this.loadScript(manifest, lsCallback, AssetPos);
          }
        };
      })(this), (function(_this) {
        return function(e) {
          return _this.d2log(e);
        };
      })(this));
    };


    /**
    * @method PreloadAudio
    *
    * using SoundJS this will load in the provided sounds
    *
    * @param manifest:Array - an array of objects for sounds including sources ID and other data.
    * @param audCallback:Function - a function to call once the sounds are all loaded.
    * @return Void 0
    *
     */

    DrawingAreaManager.prototype.PreloadAudio = function(manifest, audCallback) {
      var filesToLoad, handleSoundError, handleSoundLoaded;
      filesToLoad = manifest.length;
      if (filesToLoad === 0) {
        if (audCallback) {
          audCallback();
        }
      }
      handleSoundLoaded = (function(_this) {
        return function(e) {
          filesToLoad--;
          if (filesToLoad === 0) {
            if (audCallback) {
              return audCallback();
            }
          }
        };
      })(this);
      handleSoundError = (function(_this) {
        return function(e) {
          d2log(e.id + " Failed to load");
          d2log(e);
          return handleSoundLoaded();
        };
      })(this);
      if (!this._initalized) {
        if (!createjs.Sound.initializeDefaultPlugins()) {
          this.d2log("ERROR Sound Plugin failed to init");
        }
      }
      createjs.Sound.removeAllEventListeners();
      createjs.Sound.on("fileload", handleSoundLoaded, this);
      createjs.Sound.on("fileerror ", handleSoundError, this);
      createjs.Sound.registerSounds(manifest);
    };


    /**
    * @method PreloadResources
    *
    * using PreloadJS this will load in images and data files.
    *
    * @param manifest:Array - an array of objects for the resources including sources ID and other data.
    * @param audCallback:Function - a function to call once the resources are all loaded.
    * @return Void 0
    *
     */

    DrawingAreaManager.prototype.PreloadResources = function(manifest, prCallback) {
      var handleFileLoaded, i, j, len, len1, mSrc, mr, removeDuplicate;
      if (manifest.length === 0) {
        return prCallback();
      }
      for (i = 0, len = manifest.length; i < len; i++) {
        mr = manifest[i];
        mr.crossOrigin = "anonymous";
      }
      if (this._loadedAssets.constructor !== createjs.LoadQueue) {
        this._loadedAssets = new createjs.LoadQueue();
      }
      handleFileLoaded = (function(_this) {
        return function(e) {
          if (e.item.frameData) {
            daMan._loadedAssets.getResult(e.item.id).dataset.frameData = JSON.stringify(e.item.frameData);
          }
          return _this.d2log(e.item.id + " loaded");
        };
      })(this);
      this._loadedAssets.removeAllEventListeners();
      this._loadedAssets.on("fileload", handleFileLoaded);
      this._loadedAssets.on("error", (function(_this) {
        return function(e) {
          _this.d2log("file load error");
          return _this.d2log(e);
        };
      })(this));
      if (prCallback && prCallback.constructor === Function) {
        this._loadedAssets.on('complete', (function(_this) {
          return function() {
            _this._loadedAssets.removeAllEventListeners();
            if (prCallback) {
              return prCallback();
            }
          };
        })(this));
      }
      removeDuplicate = (function(_this) {
        return function() {
          var pli;
          pli = 0;
          while (pli < manifest.length) {
            if (daMan._loadedAssets.getResult(manifest[pli].id)) {
              manifest.splice(pli, 1);
              return removeDuplicate();
            }
            pli++;
          }
        };
      })(this);
      removeDuplicate();
      for (j = 0, len1 = manifest.length; j < len1; j++) {
        mSrc = manifest[j];
        if (mSrc.src.indexOf("?_=") === -1) {
          mSrc.src = this.randomQuery(mSrc.src);
        }
      }
      if (manifest.length !== 0) {
        this._loadedAssets.loadManifest(manifest);
      } else {
        if (prCallback) {
          prCallback();
        }
      }
    };


    /**
    * @method HandleCJSTick
    *
    * using the ticker in CreateJS this will update all necessary objects 
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DrawingAreaManager.prototype.HandleCJSTick = function() {
      var da, i, len, ref, results;
      ref = this._DrawAreas;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        da = ref[i];
        if (da.Update) {
          results.push(da.Update());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };


    /**
    * @method getScript
    *
    * Function used to get scripts without preload (from A.E.)
    * 
    * @param source:String - url of file to get
    * @param onDone:Function - function to call upon successful retrieval.
    * @param onFail:Function - function to call upon failed retrieval.
    * 
    * @return Void 0
    *
    *
     */

    DrawingAreaManager.prototype.getScript = function(source, onDone, onFail) {
      var prior, script;
      script = document.createElement('script');
      prior = document.getElementsByTagName('script')[0];
      script.async = 1;
      prior.parentNode.insertBefore(script, prior);
      script.onload = script.onreadystatechange = function(e, isAbort) {
        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
          script.onload = script.onreadystatechange = null;
          script = void 0;
          if (!isAbort) {
            if (onDone) {
              onDone(e);
            }
          } else {
            if (onFail) {
              onFail(e);
            }
          }
        }
      };
      script.src = source;
    };


    /**
    * @method RequestPreloadAnimations
    *
    * Function Call the PreInit function of all drawing areas currently active. these will start the preloading animations if available.
    * 
    * @param Void 0
    * @return Void 0
    *
    *
     */

    DrawingAreaManager.prototype.RequestPreloadAnimations = function() {
      var da, i, len, rda, ref;
      ref = this._requestedDrawingAreas;
      for (i = 0, len = ref.length; i < len; i++) {
        rda = ref[i];
        da = new window.DrawingArea(rda.canvasID, this, rda.options);
        this._DrawAreas.push(da);
        da.PreInit();
      }
    };


    /**
    * @method RequestInitDas
    *
    * All drawing areas that had been requested during the loading process get initialized here.
    * 
    * @param Void 0
    * @return Void 0
    *
    *
     */

    DrawingAreaManager.prototype.RequestInitDas = function() {
      var i, len, mainfest, mod, newID, rda, ref, tb, wt;
      ref = this._requestedDrawingAreas;
      for (i = 0, len = ref.length; i < len; i++) {
        rda = ref[i];
        if (rda.options.useToolbars || rda.options.useModals) {
          mainfest = [];
          tb = 0;
          while (tb < rda.options.useToolbars.length) {
            newID = rda.options.useToolbars[tb].replace(/^.*[\\\/]/, '').replace(/\.[^\/.]+$/, '');
            if (this._loadedAssets.getResult(newID) === null) {
              mainfest.push({
                src: rda.options.useToolbars[tb],
                id: newID
              });
            }
            rda.options.useToolbars[tb] = newID;
            tb++;
          }
          wt = 0;
          while (wt < rda.options.useWalkthroughs.length) {
            newID = rda.options.useWalkthroughs[wt].replace(/^.*[\\\/]/, '').replace(/\.[^\/.]+$/, '');
            if (this._loadedAssets.getResult(newID) === null) {
              mainfest.push({
                src: rda.options.useWalkthroughs[wt],
                id: newID
              });
            }
            rda.options.useWalkthroughs[wt] = newID;
            wt++;
          }
          mod = 0;
          while (mod < rda.options.useModals.length) {
            newID = rda.options.useModals[mod].replace(/^.*[\\\/]/, '').replace(/\.[^\/.]+$/, '');
            if (this._loadedAssets.getResult(newID) === null) {
              mainfest.push({
                src: rda.options.useModals[mod],
                id: newID
              });
            }
            rda.options.useModals[mod] = newID;
            mod++;
          }
          if (mainfest.length !== 0) {
            this.PreloadResources(mainfest, (function(_this) {
              return function() {
                return _this.GetDrawingArea(rda.canvasID).Init(rda.options);
              };
            })(this));
          } else {
            this.GetDrawingArea(rda.canvasID).Init(rda.options);
          }
        } else {
          this.GetDrawingArea(rda.canvasID).Init(rda.options);
        }
      }
    };


    /**
    *
    * @method SetDrawingArea
    *
    * Builds a Drawing Area from the provided canvas
    *
    * @param domID:String   - the id of the canvas element that will be converted to a drawing area.
    * @param options:Object - a list of options and values that will define the drawing area.
    * @return void 0
    *
     */

    DrawingAreaManager.prototype.SetDrawingArea = function(domID, options) {
      var mainfest, mod, newID, tb;
      if (this.GetDrawingArea(domID) === false) {
        if (options.useToolbars || options.useModals) {
          mainfest = [];
          tb = 0;
          while (tb < options.useToolbars.length) {
            newID = options.useToolbars[tb].replace(/^.*[\\\/]/, '').replace(/\.[^\/.]+$/, '');
            if (this._loadedAssets.getResult(newID) === null) {
              mainfest.push({
                src: options.useToolbars[tb],
                id: newID
              });
            }
            options.useToolbars[tb] = newID;
            tb++;
          }
          mod = 0;
          while (mod < options.useModals.length) {
            newID = options.useModals[mod].replace(/^.*[\\\/]/, '').replace(/\.[^\/.]+$/, '');
            if (this._loadedAssets.getResult(newID) === null) {
              mainfest.push({
                src: options.useModals[mod],
                id: newID
              });
            }
            options.useModals[mod] = newID;
            mod++;
          }
          if (mainfest.length !== 0) {
            this.PreloadResources(mainfest, (function(_this) {
              return function() {
                return _this._DrawAreas.push(new window.DrawingArea(domID, _this, options));
              };
            })(this));
          } else {
            this._DrawAreas.push(new window.DrawingArea(domID, this, options));
          }
        } else {
          this._DrawAreas.push(new window.DrawingArea(domID, this, options));
        }
      }
    };


    /**
    *
    * @method GetDrawingArea 
    *
    * Retrieves a Drawing Area by its canvas id
    *
    * @param domID
    * @return window.DrawingArea
    *
     */

    DrawingAreaManager.prototype.GetDrawingArea = function(domID) {
      var da, i, len, ref;
      ref = this._DrawAreas;
      for (i = 0, len = ref.length; i < len; i++) {
        da = ref[i];
        if (da._domID === domID) {
          return da;
        }
      }
      return false;
    };


    /**
    *
    * @method DACA 
    *
    * Drawing Area Custom Action, This will call one of the defined actions 
    *
    * @param actions:String the action to call
    * @param daRef:String   the dom object id of the canvas affected
    * @param params:Array   Array of values to pass to the action provided.
    * @return Boolean if function was called 
    *
     */

    DrawingAreaManager.prototype.DACA = function(actions, daRef, params) {
      if (daRef.constructor === String) {
        daRef = this.GetDrawingArea(daRef);
      }
      switch (actions) {
        case "DrawColor":
          if (params.constructor === Array) {
            daRef._DrawOptions.color = params[0].data;
            daRef.HandleInternalEvent("onDaca_" + actions, params[0]);
          } else {
            daRef._DrawOptions.color = params.data;
            daRef.HandleInternalEvent("onDaca_" + actions, params);
          }
          return true;
        case "DrawSize":
          if (params.constructor === Array) {
            daRef._DrawOptions.size = params[0].data;
            daRef.HandleInternalEvent("onDaca_" + actions, params[0]);
          } else {
            daRef._DrawOptions.size = params.data;
            daRef.HandleInternalEvent("onDaca_" + actions, params);
          }
          daRef._DrawOptions.stampMode = false;
          return true;
        case "PenType":
          if (params.constructor === Array) {
            daRef._DrawOptions.penType = params[0].data;
            daRef.HandleInternalEvent("onDaca_" + actions, params[0]);
          } else {
            daRef._DrawOptions.penType = params.data;
            daRef.HandleInternalEvent("onDaca_" + actions, params);
          }
          daRef._DrawOptions.stampMode = false;
          return true;
        case "PenOpacity":
          if (params.constructor === Array) {
            daRef._DrawOptions.penOpacity = params[0].data;
            daRef.HandleInternalEvent("onDaca_" + actions, params[0]);
          } else {
            daRef._DrawOptions.penOpacity = params.data;
            daRef.HandleInternalEvent("onDaca_" + actions, params);
          }
          return true;
        case "Fade":
          if (params.constructor === Array) {
            daRef._DrawOptions.fade = params[0].data;
            daRef.HandleInternalEvent("onDaca_" + actions, params[0]);
          } else {
            daRef._DrawOptions.fade = params.data;
            daRef.HandleInternalEvent("onDaca_" + actions, params);
          }
          return true;
        case "StampMode":
          if (params.constructor === Array) {
            if (params[0].data === true || params[0].data === "true") {
              daRef._DrawOptions.stampMode = true;
            } else {
              daRef._DrawOptions.stampMode = false;
            }
          } else {
            if (params.data === true || params.data === "true") {
              daRef._DrawOptions.stampMode = true;
            } else {
              daRef._DrawOptions.stampMode = false;
            }
          }
          daRef.HandleInternalEvent("onDaca_" + actions, params);
          return true;
        case "StampSelection":
          if (params.constructor === Array) {
            daRef._DrawOptions.stampSelection = params[0].data;
            daRef.HandleInternalEvent("onDaca_" + actions, params[0]);
          } else {
            daRef._DrawOptions.stampSelection = params.data;
            daRef.HandleInternalEvent("onDaca_" + actions, params);
          }
          return true;
        case "EraseMode":
          if (params.constructor === Array) {
            if (params[0].data === true || params[0].data === "true") {
              daRef._DrawOptions.eraseMode = true;
            } else {
              daRef._DrawOptions.eraseMode = false;
            }
          } else {
            if (params.data === true || params.data === "true") {
              daRef._DrawOptions.eraseMode = true;
            } else {
              daRef._DrawOptions.eraseMode = false;
            }
          }
          daRef.HandleInternalEvent("onDaca_" + actions, params);
          return true;
        case "Undo":
          daRef.HandleInternalEvent("onDaca_" + actions, params);
          daRef.RequestUndo();
          return true;
        case "Redo":
          daRef.HandleInternalEvent("onDaca_" + actions, params);
          daRef.RequestRedo();
          return true;
        case "Clear":
          daRef.HandleInternalEvent("onDaca_" + actions, params);
          daRef.Clear();
          return true;
        case "DownloadImage":
          daRef.HandleInternalEvent("onDaca_" + actions, params);
          daRef.DownloadImage();
          return true;
        case "PrintImage":
          daRef.HandleInternalEvent("onDaca_" + actions, params);
          daRef.PrintImage();
          return true;
        case "OpenModal":
          if (params.constructor === Array) {
            daRef.OpenModal(params[0].data);
          } else {
            daRef.OpenModal(params.data);
          }
          daRef.HandleInternalEvent("onDaca_" + actions, params);
          return true;
        case "CloseModal":
          if (params.constructor === Array) {
            daRef.CloseModal(params[0].data, function() {
              return daRef.HandleInternalEvent("onDaca_" + actions, params);
            });
          } else {
            daRef.CloseModal(params.data, function() {
              return daRef.HandleInternalEvent("onDaca_" + actions, params);
            });
          }
          return true;
        case "OpenSlideInstructions":
          daRef.OpenSlideInstructions();
          return true;
        case "RequestWalkthrough":
          if (params.constructor === Array) {
            daRef._walkthroughRequested = params[0].data;
          } else {
            daRef._walkthroughRequested = params.data;
          }
          return true;
        case "StartWalkthrough":
          if (params.constructor === Array) {
            daRef._walkthroughs[params[0].data].Start();
          } else {
            daRef._walkthroughs[params.data].Start();
          }
          daRef.HandleInternalEvent("onDaca_" + actions, params);
          break;
        case "SlideNav":
          if (params.constructor === Array) {
            daRef.SlideNav(params[0].data);
          } else {
            daRef.SlideNav(params.data);
          }
          daRef.HandleInternalEvent("onDaca_" + actions, params);
          return true;
      }
      return false;
    };


    /**
    *
    * @method IsDacaString 
    *
    * Checks to see if provided action is a DACA action
    *
    * @param command:String the action to call
    * @return Bool does it exist
    *
     */

    DrawingAreaManager.prototype.IsDacaString = function(command) {
      var daca, i, len, ref;
      ref = this._DacaCommands;
      for (i = 0, len = ref.length; i < len; i++) {
        daca = ref[i];
        if (command === daca) {
          return true;
        }
      }
      return false;
    };


    /**
    *
    * @method CustomEventCall 
    *
    * Called when a custom event is triggered. this can call a DACA or evaluate a JS line.
    *
    * @param call:String the action to call (DACA or JS)
    * @param callerDA:String the id of the drawing area the call is coming from
    * @param params:Array any values to be passed to the command (DACA only)
    * @return Void 0
    *
     */

    DrawingAreaManager.prototype.CustomEventCall = function(call, callerDA, params) {
      var e, error;
      if (call.constructor === String) {
        if (this.IsDacaString(call)) {
          this.DACA(call, callerDA, params);
        } else {
          try {
            eval(call);
          } catch (error) {
            e = error;
            this.d2log(e);
          }
        }
      } else if (call.constructor === Function) {
        call();
      } else {
        this.d2log("Unknown event data provided");
      }
    };


    /**
    *
    * @method HandleResizeEvent 
    *
    * Called when the window has changed size
    *
    * @param evt:Event window resize event
    * @return Void 0
    *
     */

    DrawingAreaManager.prototype.HandleResizeEvent = function(evt) {
      var da, i, len, ref;
      ref = this._DrawAreas;
      for (i = 0, len = ref.length; i < len; i++) {
        da = ref[i];
        da.HandleResizeEvent(evt);
      }
    };

    DrawingAreaManager.prototype.ParseDataText = function(callerDA, text) {
      var jsTag;
      jsTag = "[%js]";
      if (text.indexOf(jsTag) === 0) {
        text = eval(text.slice(jsTag.length));
      }
      return text;
    };


    /**
    *
    * @method GetLang 
    *
    * This when called will retrieve the appropriate context for a default string in the language requested
    * Available: "EN"
    *
    * @param callerDA:DrawingArea the Drawing area making the call
    * @param langKey: the language key for the data to retrieve
    *
    * @return String the retrieved string
    *
     */

    DrawingAreaManager.prototype.GetLang = function(callerDA, langKey) {
      var langData, useLangDat;
      if (!callerDA) {
        consoel.log('GetLang recived undeifned callerDA');
        return;
      }
      switch (callerDA._langSet) {
        case "EN":
          useLangDat = "stnd_def_lang_EN";
          break;
        default:
          this.d2log("Drawing area requesting unknown lang set " + callerDA._langSet + " using stnd_def_lang_EN");
          useLangDat = "stnd_def_lang_EN";
      }
      langData = JSON.parse(this._loadedAssets.getResult(useLangDat));
      if (langData[langKey]) {
        return langData[langKey];
      } else {
        this.d2log("Drawing area requesting unknown langKey " + langKey + " ensure this exist in language data JSON  " + useLangDat);
        return "language request error";
      }
    };


    /**
    *
    * @method HexToRGBA 
    *
    * modified from > https://jsfiddle.net/subodhghulaxe/t568u/ Author: subodhghulaxe
    *
    * Converts a hex string into a RGBA string
    *
    * @param hxString:String the hex string to convert
    * @param a: the alpha value of the RGBA string
    *
    * @return String the RGBA value
    *
     */

    DrawingAreaManager.prototype.HexToRGBA = function(hxString, a) {
      var b, g, r;
      if (hxString.length === 7) {
        r = parseInt(hxString.substr(1, 2), 16);
        g = parseInt(hxString.substr(3, 2), 16);
        b = parseInt(hxString.substr(5, 2), 16);
        return "rgba(" + r + "," + g + "," + b + "," + a + ")";
      }
      if (hxString.length === 4) {
        r = parseInt(hxString.substr(1, 1), 16);
        g = parseInt(hxString.substr(2, 1), 16);
        b = parseInt(hxString.substr(3, 1), 16);
        return "rgba(" + r + "," + g + "," + b + "," + a + ")";
      }
      return this.d2log("HexToRGBA passed bad value " + hxString);
    };


    /**
    *
    * @method d2log
    *
    * Generic D2L logging method. Used to try and prevent large amounts of console logging in production (from Vin.)
    *
    * @param {string} m
    * @return {} Console logs m
     */

    DrawingAreaManager.prototype.d2log = function(m) {
      if (typeof D2LDEBUG !== 'undefined') {
        if (D2LDEBUG) {
          console.log(m);
        }
      }
    };

    DrawingAreaManager.prototype.randomQuery = function(url) {
      var tempURL;
      tempURL = url.replace(/\s/g, '');
      return tempURL + "?_=" + Math.round((new Date().getTime() * Math.random()) / 100);
    };

    return DrawingAreaManager;

  })();

}).call(this);
