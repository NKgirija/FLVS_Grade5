// Generated by CoffeeScript 1.10.0

/**
*
* The DaTooltip
*
* @class DaTooltip
*
* @author C.J. Morrison
*
* @since 10/12/2016
*
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.DaTooltip = (function() {

    /**
    *
    * ID associated with object, this is used for searching and selecting, this is required and must be unique
    *
    * @property _id
    *
    * @type {String}
    *
    * @default void 0
    *
     */
    DaTooltip.prototype._id = void 0;


    /**
    *
    * Drawing Area Reference, this will reference the Drawing Area this Button is associated with.
    *
    * @property _daRef
    *
    * @type {DrawingArea}
    *
    * @default void 0
    *
     */

    DaTooltip.prototype._daRef = void 0;


    /**
    *
    * The container for the button shapes and text of the tooltip 
    *
    * @property _container
    *
    * @type {createJS._container}
    *
    * @default 0
    *
     */

    DaTooltip.prototype._container = void 0;


    /**
    *
    * Constructor will define the properties for this class and call Build method as well as Hide
    *
    * @method DaButton
    * 
    * @param daRef - Drawing Area Reference.
    * @param options - array of options and values for this button (includes id)
    * @return void 0
    *
     */

    function DaTooltip(daRef, options) {
      this.Show = bind(this.Show, this);
      this.Hide = bind(this.Hide, this);
      this.SetText = bind(this.SetText, this);
      this.Move = bind(this.Move, this);
      this.Build = bind(this.Build, this);
      this._daRef = daRef;
      this._daManagerRef = daRef._managerRef;
      this._options = options;
      this._id = options.id;
      this.Build();
      this.Hide();
    }


    /**
    *
    * @method Build
    *
    * Defines the tooltip container all of the shapes within it as well as the animations.
    *
    * @param Void 0
    * @return this
    *
     */

    DaTooltip.prototype.Build = function() {
      var background, backgroundOutline, bgShape1, bgShape2, fadeOutlineIn, fadeOutlineOut, outlineThickness, sampleText, sampleTextBounds, useHeight, usePadding, useWidth;
      if (this._container) {
        this._container.removeAllChildren();
      } else {
        this._container = new createjs.Container();
      }
      background = new createjs.Container();
      backgroundOutline = new createjs.Container();
      if (!this._textAlign) {
        this._textAlign = "center";
      }
      usePadding = 20;
      outlineThickness = 12;
      if (this._options.width) {
        useWidth = this._options.width;
      } else if (!this._options.width && this._options.text === void 0) {
        useWidth = 100;
      } else if (!this._options.width && this._options.text) {
        sampleText = new createjs.Text(this._options.text, "bold " + (20 * this._daManagerRef._fontScaleAdjust) + "px " + this._daManagerRef._defaultFont, "#FFFFFF");
        sampleText.align = "center";
        sampleText.lineWidth = 300;
        sampleText.maxWidth = 300;
        sampleTextBounds = sampleText.getBounds();
        useWidth = Math.round(sampleTextBounds.width + (usePadding * 2));
      }
      if (this._options.useHeight) {
        useHeight = this._options.useHeight;
      } else if (!this._options.height && this._options.text === void 0) {
        useHeight = 40;
      } else if (!this._options.height && this._options.text) {
        sampleText = new createjs.Text(this._options.text, "bold " + (20 * this._daManagerRef._fontScaleAdjust) + "px " + this._daManagerRef._defaultFont, "#FFFFFF");
        sampleText.align = "center";
        sampleText.lineWidth = 300;
        sampleText.maxWidth = 300;
        sampleTextBounds = sampleText.getBounds();
        useHeight = Math.round(sampleTextBounds.height + usePadding);
      }
      bgShape1 = new createjs.Shape();
      bgShape1.graphics.beginFill("#233b47");
      bgShape1.graphics.drawRoundRect(0, 0, useWidth, useHeight, 20);
      background.addChild(bgShape1);
      bgShape1 = new createjs.Shape();
      bgShape1.graphics.beginFill("RGBA(0,0,0,0)");
      bgShape1.graphics.setStrokeStyle(outlineThickness, "round");
      bgShape1.graphics.beginStroke("#8bd9eb");
      bgShape1.graphics.drawRoundRect(0, 0, useWidth, useHeight, 20);
      backgroundOutline.addChild(bgShape1);
      if (this._options.pointDirection === "left" || this._options.pointDirection === "right") {
        bgShape2 = new createjs.Shape();
        bgShape2.graphics.beginFill("#233b47");
        bgShape2.graphics.moveTo(useWidth - 20, useHeight / 3);
        bgShape2.graphics.lineTo(useWidth, useHeight / 3);
        bgShape2.graphics.lineTo(useWidth + (useHeight / 4), useHeight / 2);
        bgShape2.graphics.lineTo(useWidth, (useHeight / 3) * 2);
        bgShape2.graphics.lineTo(useWidth - 20, (useHeight / 3) * 2);
        bgShape2.graphics.lineTo(useWidth - 20, useHeight / 3);
        background.addChild(bgShape2);
        bgShape2 = new createjs.Shape();
        bgShape2.graphics.beginStroke("#8bd9eb");
        bgShape2.graphics.setStrokeStyle(outlineThickness, "round");
        bgShape2.graphics.moveTo(useWidth, useHeight / 3);
        bgShape2.graphics.lineTo(useWidth + (useHeight / 4), useHeight / 2);
        bgShape2.graphics.lineTo(useWidth, (useHeight / 3) * 2);
        bgShape2.graphics.endStroke();
        backgroundOutline.addChild(bgShape2);
        if (this._options.pointDirection === "right") {
          background.scaleX = -1;
          background.x = useWidth + (useHeight / 4);
          backgroundOutline.scaleX = -1;
          backgroundOutline.x = useWidth + (useHeight / 4);
        }
      } else if (this._options.pointDirection === "top" || this._options.pointDirection === "bottom" || this._options.pointDirection === "up" || this._options.pointDirection === "down") {
        bgShape2 = new createjs.Shape();
        bgShape2.graphics.beginFill("#233b47");
        bgShape2.graphics.moveTo((useWidth / 2) - 10, useHeight - 10);
        bgShape2.graphics.lineTo((useWidth / 2) - 10, useHeight);
        bgShape2.graphics.lineTo(useWidth / 2, useHeight + 10);
        bgShape2.graphics.lineTo((useWidth / 2) + 10, useHeight);
        bgShape2.graphics.lineTo((useWidth / 2) + 10, useHeight - 10);
        bgShape2.graphics.lineTo((useWidth / 2) - 10, useHeight - 10);
        background.addChild(bgShape2);
        bgShape2 = new createjs.Shape();
        bgShape2.graphics.beginStroke("#8bd9eb");
        bgShape2.graphics.setStrokeStyle(outlineThickness, "round");
        bgShape2.graphics.moveTo((useWidth / 2) - 10, useHeight);
        bgShape2.graphics.lineTo(useWidth / 2, useHeight + 10);
        bgShape2.graphics.lineTo((useWidth / 2) + 10, useHeight);
        bgShape2.graphics.endStroke();
        backgroundOutline.addChild(bgShape2);
        if (this._options.pointDirection === "top" || this._options.pointDirection === "up") {
          background.scaleY = -1;
          backgroundOutline.scaleY = -1;
        }
      }
      this._container.addChild(backgroundOutline);
      this._container.addChild(background);
      if (this._options.text) {
        this._text = new createjs.Text(this._options.text, "bold " + (20 * this._daManagerRef._fontScaleAdjust) + "px " + this._daManagerRef._defaultFont, "#FFFFFF");
      } else {
        this._text = new createjs.Text("THING", "bold " + (20 * this._daManagerRef._fontScaleAdjust) + "px " + this._daManagerRef._defaultFont, "#FFFFFF");
      }
      this._text.x = 0;
      this._text.y = 7;
      this._text.maxWidth = useWidth;
      this._text.lineWidth = useWidth;
      this._text.textAlign = this._textAlign;
      if (this._text.textAlign === "center") {
        this._text.regX = -(useWidth / 2);
      } else {
        this._text.regX = 0;
      }
      this._container.addChild(this._text);
      if (this._daManagerRef._FFtextAdjust) {
        this._text.y += 3;
      }
      if (this._options.pointDirection === "right") {
        this._text.x = 10;
        this._container.regX = 0;
      } else if (this._options.pointDirection === "left") {
        this._container.regX = useWidth;
      } else if (this._options.pointDirection === "top" || this._options.pointDirection === "up") {
        this._text.y -= 40;
        this._container.regY = 0;
      } else if (this._options.pointDirection === "bottom" || this._options.pointDirection === "down") {
        this._text.y = 5;
        this._container.regY = useHeight;
      } else {
        this._container.regX = useWidth + (useHeight / 4);
      }
      this._container.regY = useHeight / 2;
      if (this._options.xPos) {
        this._container.x = this._options.xPos;
      }
      if (this._options.yPos) {
        this._container.y = this._options.yPos;
      }
      fadeOutlineOut = (function(_this) {
        return function() {
          return createjs.Tween.get(backgroundOutline).to({
            alpha: 0
          }, 1200, createjs.Ease.getPowInOut(3)).call(function() {
            return fadeOutlineIn();
          });
        };
      })(this);
      fadeOutlineIn = (function(_this) {
        return function() {
          return createjs.Tween.get(backgroundOutline).to({
            alpha: 1
          }, 1200, createjs.Ease.getPowInOut(3)).call(function() {
            return fadeOutlineOut();
          });
        };
      })(this);
      fadeOutlineOut();
      return this;
    };


    /**
    *
    * @method Move
    *
    * Moves Tooltip to desired X and Y coordinates
    *
    * @param x:Number the X position the button will be moved to
    * @param y:Number the Y position the button will be moved to
    * @return Void 0
    *
     */

    DaTooltip.prototype.Move = function(x, y) {
      this._container.x = x;
      return this._container.y = y;
    };


    /**
    *
    * @method SetText
    *
    * Changes the text of the tooltip to the provided string
    *
    * @param newText:String
    * @return Void 0
    *
     */

    DaTooltip.prototype.SetText = function(newText) {
      this._options.text = newText;
      return this.Build();
    };


    /**
    *
    * @method Hide
    *
    * Hides the Tooltip
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DaTooltip.prototype.Hide = function() {
      return this._container.visible = false;
    };


    /**
    *
    * @method Show
    *
    * Reveals the Tooltip
    *
    * @param Void 0
    * @return Void 0
    *
     */

    DaTooltip.prototype.Show = function() {
      return this._container.visible = true;
    };

    return DaTooltip;

  })();

}).call(this);
