// Generated by CoffeeScript 1.10.0

/**
*
* The magnetWord
*
* @class magnetWord
*
* @author C.J. Morrison
*
* @since 10/12/2016
*
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.magnetWord = (function(superClass) {
    extend(magnetWord, superClass);

    magnetWord.prototype._dragging = void 0;

    magnetWord.prototype._parentMem = void 0;

    magnetWord.prototype._posistionMem = void 0;

    magnetWord.prototype._setRotVal = void 0;


    /**
    *
    * Constructor will define the properties for this class and call Build method
    *
    * @method magnetWord
    * 
    * @param canRef - Drawing Area Reference.
    * @param options - array of options and values for this button (includes id)
    * @return void 0
    *
     */

    function magnetWord(canRef, options) {
      this.SwapParent = bind(this.SwapParent, this);
      this.HandleInvaildDrop = bind(this.HandleInvaildDrop, this);
      this.CheckBounds = bind(this.CheckBounds, this);
      this.HandleMouseMove = bind(this.HandleMouseMove, this);
      this.HandlePressup = bind(this.HandlePressup, this);
      this.EndAccessDrag = bind(this.EndAccessDrag, this);
      this.BeginAccessDrag = bind(this.BeginAccessDrag, this);
      this.HandlePress = bind(this.HandlePress, this);
      this.Build = bind(this.Build, this);
      magnetWord.__super__.constructor.call(this, canRef, options);
      this._dragging = false;
      this._parentMem = "wordTray";
      if (this._options.useWordTilts) {
        this._setRotVal = Math.round(Math.random() * 20) - 10;
      } else {
        this._setRotVal = 0;
      }
      this._isSwapping = false;
      this.regX = this._width / 2;
      this.regY = this._height / 2;
    }

    magnetWord.prototype.Build = function() {
      if (this._options.dropSound) {
        this._dropSound = this._options._dropSound;
      } else {
        this._dropSound = "snapSound";
      }
      return magnetWord.__super__.Build.call(this);
    };

    magnetWord.prototype.HandlePress = function(e) {
      magnetWord.__super__.HandlePress.call(this, e);
      if (e && this._enabled && !this._hidden) {
        if (this.parent && this.parent !== stage) {
          this.SwapParent("stage");
        } else if (this.parent === stage) {
          stage.setChildIndex(this, stage.numChildren - 1);
        }
        this.rotation = this._setRotVal;
        this._posistionMem = {
          x: this.x,
          y: this.y
        };
        this.Move(e.stageX, e.stageY);
        this._dragging = true;
        return window._mouseDragTarget = this;
      }
    };

    magnetWord.prototype.BeginAccessDrag = function() {
      if (this._enabled && !this._hidden) {
        if (this.parent && this.parent !== stage) {
          this.SwapParent("stage");
          this.Move(200, 200);
        } else if (this.parent === stage) {
          stage.setChildIndex(this, stage.numChildren - 1);
        }
        this.rotation = this._setRotVal;
        this._posistionMem = {
          x: this.x,
          y: this.y
        };
        this._dragging = true;
        return window._mouseDragTarget = this;
      }
    };

    magnetWord.prototype.EndAccessDrag = function() {
      return this.HandlePressup({
        stageX: this.x,
        stageY: this.y
      });
    };

    magnetWord.prototype.HandlePressup = function(e) {
      var gtlc, i, len, oup, ref;
      magnetWord.__super__.HandlePressup.call(this, e);
      if (e && this._enabled && !this._hidden) {
        this._dragging = false;
        window._mouseDragTarget = void 0;
        ref = stage.getObjectsUnderPoint(e.stageX, e.stageY);
        for (i = 0, len = ref.length; i < len; i++) {
          oup = ref[i];
          if ((oup._id && oup._id === "wordTray") || (oup.parent && oup.parent._id && oup.parent._id === "wordTray")) {
            this.SwapParent("wordTray");
            gtlc = this.parent.globalToLocal(e.stageX, e.stageY);
            this.Move(Math.round(gtlc.x), Math.round(gtlc.y));
            this._parentMem = "wordTray";
            if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
              this._overState.visible = true;
            }
            createjs.Sound.stop();
            createjs.Sound.play(this._dropSound);
            return;
          }
        }
        if (!this.CheckBounds(e.stageX, e.stageY)) {
          return this.HandleInvaildDrop();
        }
        if (this.parent === stage) {
          this._parentMem = "stage";
        }
        if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
          this._overState.visible = true;
        }
        createjs.Sound.stop();
        return createjs.Sound.play(this._dropSound);
      }
    };

    magnetWord.prototype.HandleMouseMove = function(e) {
      if (this._dragging) {
        return this.Move(e.stageX, e.stageY);
      }
    };

    magnetWord.prototype.CheckBounds = function(xPos, yPos) {
      if (this._options.dragBounds) {
        if ((xPos - (this._width / 2)) > this._options.dragBounds.x && (xPos + (this._width / 2)) < this._options.dragBounds.x + this._options.dragBounds.width) {
          if ((yPos - (this._height / 2)) > this._options.dragBounds.y && (yPos + (this._height / 2)) < this._options.dragBounds.y + this._options.dragBounds.height) {
            return true;
          }
        }
      }
      return false;
    };

    magnetWord.prototype.HandleInvaildDrop = function() {
      this.x = this._posistionMem.x;
      this.y = this._posistionMem.y;
      if (this.parent) {
        if ((this.parent === stage && this._parentMem !== "stage") || (this.parent._id !== this._parentMem)) {
          this.SwapParent(this._parentMem);
        }
      } else if (this._parentMem) {
        this.SwapParent(this._parentMem);
      }
      createjs.Sound.stop();
      createjs.Sound.play("whoosh");
    };

    magnetWord.prototype.SwapParent = function(toParentID) {
      var newParent;
      if (parent) {
        if (toParentID === this.parent._id) {
          return;
        }
      }
      if (toParentID === "stage") {
        newParent = stage;
      } else {
        newParent = GetObjectById(toParentID);
        if (!newParent) {
          console.log("Failed SwapParent with " + this._id + ". requested new parent " + toParentID + " was not found");
          return;
        }
      }
      if (this.parent) {
        if (this.parent === stage) {
          stage.removeChild(this);
        } else if (this.parent.removeChild) {
          this.parent.removeChild(this);
        }
      }
      if (this._parentMem === "stage") {
        this.x -= newParent.x;
        this.y -= newParent.y;
      }
      return newParent.addChild(this);
    };

    return magnetWord;

  })(window.button);

}).call(this);
