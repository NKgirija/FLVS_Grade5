// Generated by CoffeeScript 1.10.0

/**
*
* CaptureManager
*
* @class CaptureManager
*
* @author C.J. Morrison
*
* @since 10/12/2016
*
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.CaptureManager = (function() {
    function CaptureManager() {
      this.PrintImage = bind(this.PrintImage, this);
      this.DownloadImage = bind(this.DownloadImage, this);
      this.GetImageDataURl = bind(this.GetImageDataURl, this);
      this.DestroyCaptureStage = bind(this.DestroyCaptureStage, this);
      this.PrepCaptureStage = bind(this.PrepCaptureStage, this);
    }


    /**
    *
    * @method PrepCaptureStage
    *
    * Called in the event of a Capture or Print event. This will alter the Drawing Area layout to the required appearance
    * by creating a temporary stage (this stage will not be visible on the dom) and populating it with the graphics in the visible drawing area.
    *
    * @param Void 0
    * @return createJS.stage - the stage of a temporary canvas.
    *
     */

    CaptureManager.prototype.PrepCaptureStage = function(callback) {
      var cnvrtCnvs, i, len, mag, magClone, snapStage;
      cnvrtCnvs = document.createElement('canvas');
      cnvrtCnvs.width = stage.width;
      cnvrtCnvs.height = stage.height;
      cnvrtCnvs.hidden = true;
      cnvrtCnvs.id = 'MpSnapCanvas';
      document.body.appendChild(cnvrtCnvs);
      snapStage = new createjs.Stage('MpSnapCanvas');
      snapStage.addChild(_bg.clone());
      for (i = 0, len = _wordObjects.length; i < len; i++) {
        mag = _wordObjects[i];
        snapStage.update();
        if (mag.parent === stage) {
          magClone = mag.clone(true);
          magClone.removeAllEventListeners();
          snapStage.addChild(magClone);
        }
      }
      snapStage.update();
      if (callback) {
        return callback(snapStage);
      }
    };


    /**
    *
    * @method DestroyCaptureStage
    *
    * After a capture or print event has completed this function destroys the temporary stage and canvas.
    *
    * @param Void 0
    * @return createJS.stage - the stage of a temporary canvas.
    *
     */

    CaptureManager.prototype.DestroyCaptureStage = function(stage) {
      stage.removeAllChildren();
      return document.body.removeChild(stage.canvas);
    };


    /**
    *
    * @method GetImageDataURl
    *
    * This is the older method of Capturing the canvas image, this will use the PrepCaptureStage function and produce a Base64 data link to the image created
    *
    * @param Void 0
    * @return String - a Base64 src for the image data captured
    *
     */

    CaptureManager.prototype.GetImageDataURl = function(callback) {
      return this.PrepCaptureStage((function(_this) {
        return function(snapStage) {
          var ImageURLData;
          ImageURLData = snapStage.canvas.toDataURL('image/png');
          _this.DestroyCaptureStage(snapStage);
          if (callback) {
            return callack(ImageURLData);
          }
        };
      })(this));
    };


    /**
    *
    * @method DownloadImage
    *
    * The newer capture method. this uses the PrepCaptureStage and the external canvas to blob library as well as the File Saver library to directly download the capture image.
    *
    * @param Void 0
    * @return Void 0
    *
     */

    CaptureManager.prototype.DownloadImage = function(callback) {
      return this.PrepCaptureStage((function(_this) {
        return function(snapStage) {
          snapStage.canvas.toBlob(function(blob) {
            return saveAs(blob, "Magnetic Poem - " + (new Date().getTime()) + ".jpeg");
          }, "image/jpeg", 1);
          _this.DestroyCaptureStage(snapStage);
          if (callback) {
            return callback();
          }
        };
      })(this));
    };


    /**
    *
    * @method PrintImage
    *
    * Printing is similar to capture. however instead of saving the data, print will place the image in a new window then print the window.
    * Using this method places a special lock. This is necessary as the original window (or tab) will not function while a print dialog is open.
    *
    * @param Void 0
    * @return Void 0
    *
     */

    CaptureManager.prototype.PrintImage = function() {
      this.PrepCaptureStage((function(_this) {
        return function(snapStage) {
          var pdf, pg;
          pdf = new jsPDF('l');
          pg = 0;
          pdf.addImage(snapStage.canvas.toDataURL("image/png"), 'PNG', 50, 20);
          pdf.save("MagneticPoem-" + (new Date().getTime()) + ".pdf");
          return _this.DestroyCaptureStage(snapStage);
        };
      })(this));
    };

    return CaptureManager;

  })();

}).call(this);
